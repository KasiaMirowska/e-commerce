{"ast":null,"code":"var _jsxFileName = \"/Users/kamirska/UDEMYlearning/e-commerce-client/src/pages/shop/ShopPage.js\";\nimport React, { useEffect } from 'react';\nimport CollectionsOverviewContainer from '../../components/CollectionsOverview/CollectionsOverview-Container';\nimport { fetchCollectionsStart, fetchCollectionsFailure } from '../../redux/shop/shop.actions';\nimport CollectionContainer from '../CollectionPage/Collection-Container';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'; //import { createStructuredSelector } from 'reselect';\n//import { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\n//CONTAINER PATTERN OPTIMIZATION to keep concerns seperate to each component\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview); moved this logic to CollectionOverviewContainer\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n// const mapStateToProps = createStructuredSelector({\n//     //isCollectionFetching: selectIsCollectionFetching,\n//     // isCollectionsLoaded: selectIsCollectionsLoaded,\n// })\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    component: CollectionsOverviewContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    component: CollectionContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce-client/src/pages/shop/ShopPage.js"],"names":["React","useEffect","CollectionsOverviewContainer","fetchCollectionsStart","fetchCollectionsFailure","CollectionContainer","Route","connect","mapDispatchToProps","dispatch","ShopPage","match","path"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,4BAAP,MAAyC,oEAAzC;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,QAA+D,+BAA/D;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpCN,EAAAA,qBAAqB,EAAE,MAAMM,QAAQ,CAACN,qBAAqB,EAAtB;AADD,CAAL,CAAnC;;AAIA,MAAMO,QAAQ,GAAG,CAAC;AAACP,EAAAA,qBAAD;AAAwBQ,EAAAA;AAAxB,CAAD,KAAoC;AAClDV,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,qBAAqB;AACxB,GAFQ,EAEN,CAACA,qBAAD,CAFM,CAAT;AAIK,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK,EAAjC;AAAoC,IAAA,SAAS,EAAEV,4BAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAII,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAG,GAAES,KAAK,CAACC,IAAK,gBAA3B;AAA4C,IAAA,SAAS,EAAEP,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH,CAbL;;AAgBA,eAAeE,OAAO,CAAC,IAAD,EAAOC,kBAAP,CAAP,CAAkCE,QAAlC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport CollectionsOverviewContainer from '../../components/CollectionsOverview/CollectionsOverview-Container';\nimport { fetchCollectionsStart, fetchCollectionsFailure } from '../../redux/shop/shop.actions';\nimport CollectionContainer from '../CollectionPage/Collection-Container';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n//import { createStructuredSelector } from 'reselect';\n//import { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\n \n//CONTAINER PATTERN OPTIMIZATION to keep concerns seperate to each component\n\n//const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview); moved this logic to CollectionOverviewContainer\n//const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n// const mapStateToProps = createStructuredSelector({\n//     //isCollectionFetching: selectIsCollectionFetching,\n//     // isCollectionsLoaded: selectIsCollectionsLoaded,\n// })\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n})\n\nconst ShopPage = ({fetchCollectionsStart, match}) => {\n   useEffect(() => {\n       fetchCollectionsStart();\n   }, [fetchCollectionsStart])\n\n        return (\n            <div className='shop-page'>\n                {/* <Route exact path={`${this.props.match.path}`} render={(props) => (<CollectionsOverviewWithSpinner isLoading={!this.props.isCollectionFetching} {...props} />)} /> */}\n                <Route exact path={`${match.path}`} component={CollectionsOverviewContainer} />\n                {/* <Route path={`${this.props.match.path}/:collectionId`} render={(props) => (<CollectionPageWithSpinner isLoading={!this.props.isCollectionsLoaded} {...props} />)} /> */}\n                <Route path={`${match.path}/:collectionId`} component={CollectionContainer} />\n            </div>\n        )\n    }\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}