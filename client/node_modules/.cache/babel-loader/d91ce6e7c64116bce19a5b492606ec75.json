{"ast":null,"code":"var _jsxFileName = \"/Users/kamirska/UDEMYlearning/e-commerce/src/components/Register/Register.js\";\nimport React from 'react';\nimport './Register.styles.scss';\nimport FormInput from '../../components/FormInput/FormInput';\nimport CustomButton from '../../components/CustomButton/CustomButton';\nimport { auth, createUserProfileDocument } from '../../firebase/firebase.util';\nimport { connect } from 'react-redux';\nimport { signUpStart } from '../../redux/user/user.actions';\n\nconst mapDispatchToProps = dispatch => ({\n  registerNewUser: (displayName, email, password) => dispatch(signUpStart({\n    displayName,\n    email,\n    password\n  }))\n});\n\nclass Register extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); //just like in app.js where we were checking googleAuth now we need to create the full entry\n\n      const {\n        displayName,\n        email,\n        password,\n        confirmPassword\n      } = this.state;\n\n      if (password !== confirmPassword) {\n        alert('Password entries do not match!');\n        return;\n      }\n\n      this.props.registerNewUser(displayName, email, password);\n      console.log('IN REGISTER');\n      this.setState({\n        displayName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }); // try{\n      //     const {user} = await auth.createUserWithEmailAndPassword(email, password)\n      //     //after creating a new user we want to save the authCredentials in here to stay singed in so we call the following \n      //     await createUserProfileDocument(user, {displayName})\n      //     //once process is finished we reset the form\n      //     this.setState({\n      //         displayName: '',\n      //         email: '',\n      //         password: '',\n      //         confirmPassword: '',\n      //     })\n      // }catch(err) {\n      //     console.log(err)\n      // };\n    };\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      displayName: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    };\n  }\n\n  render() {\n    const {\n      displayName,\n      email,\n      password,\n      confirmPassword\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sign-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"I do not have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"Sign up with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      type: \"text\",\n      name: \"displayName\",\n      value: displayName,\n      onChange: this.handleChange,\n      label: \"Display name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      type: \"email\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      label: \"Email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      type: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: this.handleChange,\n      label: \"Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormInput, {\n      type: \"password\",\n      name: \"confirmPassword\",\n      value: confirmPassword,\n      onChange: this.handleChange,\n      label: \"Confirm Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"REGISTER\")));\n  }\n\n}\n\nexport default connect(null, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/components/Register/Register.js"],"names":["React","FormInput","CustomButton","auth","createUserProfileDocument","connect","signUpStart","mapDispatchToProps","dispatch","registerNewUser","displayName","email","password","Register","Component","constructor","handleSubmit","e","preventDefault","confirmPassword","state","alert","props","console","log","setState","handleChange","name","value","target","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Register.styles.scss';\nimport FormInput from '../../components/FormInput/FormInput';\nimport CustomButton from '../../components/CustomButton/CustomButton';\nimport {auth, createUserProfileDocument} from '../../firebase/firebase.util';\nimport { connect } from 'react-redux';\nimport {signUpStart} from '../../redux/user/user.actions';\n\n\nconst mapDispatchToProps = dispatch => ({\n    registerNewUser: (displayName, email, password) => dispatch(signUpStart({displayName, email, password}))\n  \n})\n\nclass Register extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            displayName: '',\n            email: '',\n            password: '',\n            confirmPassword: '',\n        }\n    }\n\n    handleSubmit = async(e) => {\n        e.preventDefault();\n        //just like in app.js where we were checking googleAuth now we need to create the full entry\n        const {displayName, email, password, confirmPassword} = this.state;\n        if(password !== confirmPassword) {\n            alert('Password entries do not match!')\n            return;\n        }\n\n        this.props.registerNewUser(displayName, email, password)\n        console.log('IN REGISTER')\n        this.setState({\n                    displayName: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                })\n        // try{\n            \n        //     const {user} = await auth.createUserWithEmailAndPassword(email, password)\n        //     //after creating a new user we want to save the authCredentials in here to stay singed in so we call the following \n        //     await createUserProfileDocument(user, {displayName})\n        //     //once process is finished we reset the form\n        //     this.setState({\n        //         displayName: '',\n        //         email: '',\n        //         password: '',\n        //         confirmPassword: '',\n        //     })\n        // }catch(err) {\n        //     console.log(err)\n        // };\n    }\n\n    handleChange =(e)=> {\n        const {name, value} = e.target;\n        this.setState({\n            [name]: value,\n        })\n    }\n\n\n    render () {\n        const {displayName, email, password, confirmPassword} = this.state;\n        return (\n            <div className='sign-up'>\n                <h2 className='title'>I do not have an account</h2>\n                <span>Sign up with your email and password</span>\n\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput \n                        type='text'\n                        name='displayName'\n                        value={displayName}\n                        onChange={this.handleChange}\n                        label='Display name'\n                        required\n                    />\n                    <FormInput \n                         type='email'\n                         name='email'\n                         value={email}\n                         onChange={this.handleChange}\n                         label='Email'\n                         required\n                    />\n                    <FormInput \n                     type='password'\n                     name='password'\n                     value={password}\n                     onChange={this.handleChange}\n                     label='Password'\n                     required\n                     />\n                    <FormInput \n                    type='password'\n                    name='confirmPassword'\n                    value={confirmPassword}\n                    onChange={this.handleChange}\n                    label='Confirm Password'\n                    required\n                    />\n\n                    <CustomButton type='submit'>REGISTER</CustomButton>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Register)"]},"metadata":{},"sourceType":"module"}