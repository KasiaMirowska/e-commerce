{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from '../user/user.actions';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const user = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield user.get(); //put method puts received data back into redux flow\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* signInWithGoogle() {\n  //api call here to sign in instead of in App.js:\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    const {\n      user\n    } = userRef;\n    yield getSnapshotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n} //we're receiving action.payload here\n\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const userRef = yield auth.signInWithEmailAndPassword(email, password); // const user = yield call(createUserProfileDocument, userRef.user);\n    // const userSnapshot = yield user.get();\n    //refactored to limit repeating code\n\n    const {\n      user\n    } = userRef;\n    yield getSnapshotFromUserAuth(user); // yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* isUserAuthenticated() {\n  try {\n    //auth obj is the same as userRef so we can use getSnapshot method\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n\nfunction* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (err) {\n    yield put(signOutFailure(err));\n  }\n}\n\nfunction* signUpNewUser(userInfo) {\n  const {\n    email,\n    password,\n    displayName\n  } = userInfo.payload;\n\n  try {\n    const userRef = yield auth.createUserWithEmailAndPassword(email, password);\n    const {\n      user\n    } = userRef;\n    yield getSnapshotFromUserAuth({ ...user,\n      displayName\n    }); // const savedUser = yield call(createUserProfileDocument, user, {displayName});\n    // const userSnapshot = yield savedUser.get();\n    // yield put(signInSuccess({...user, displayName}));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n\n  ;\n} // function* signInNewUser({payload: {userInfo}}) {\n//     console.log(userInfo, 'INFOOOOOOOO')\n// }\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  //sagas are listening for the action, here for checkUserSession, isUserAuthenticated performs the actual check\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpNewUser);\n} // export function* onSignUpSuccess() {\n//     yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInNewUser)\n// }\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart) // call(onSignUpSuccess)\n  ]);\n}","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additionalData","user","userSnapshot","get","id","data","err","signInWithGoogle","userRef","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUpNewUser","userInfo","displayName","createUserWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGNIN_START","onEmailSignInStart","EMAIL_SIGNIN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure} from '../user/user.actions';\n\nfunction* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try {\n        const user = yield call(createUserProfileDocument, userAuth, additionalData); \n        const userSnapshot = yield user.get();\n        //put method puts received data back into redux flow\n        yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n    }catch(err) {\n        yield put(signInFailure(err))\n    }\n}\n\nfunction* signInWithGoogle() {\n    //api call here to sign in instead of in App.js:\n    try {\n        const userRef = yield auth.signInWithPopup(googleProvider);\n        const {user} = userRef;\n        yield getSnapshotFromUserAuth(user)\n       \n    } catch (err) {\n        yield put(signInFailure(err))\n    }\n}\n\n//we're receiving action.payload here\nfunction* signInWithEmail({payload: {email, password}}) {\n    try{\n        const userRef = yield auth.signInWithEmailAndPassword(email, password);\n        // const user = yield call(createUserProfileDocument, userRef.user);\n        // const userSnapshot = yield user.get();\n        //refactored to limit repeating code\n        const {user} = userRef;\n        yield getSnapshotFromUserAuth(user)\n        // yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n\n    }catch(err) {\n        yield put(signInFailure(err))\n    }\n}\n\nfunction* isUserAuthenticated() {\n    try{\n        //auth obj is the same as userRef so we can use getSnapshot method\n        const userAuth = yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth);\n    }catch(err) {\n        yield put(signInFailure(err))\n    }\n}\n\nfunction* signOut() {\n    try{\n        yield auth.signOut();\n        yield put(signOutSuccess())\n    }catch(err) {\n        yield put(signOutFailure(err))\n    }\n}\n\nfunction* signUpNewUser(userInfo) {\n    const {email, password, displayName,} = userInfo.payload;\n    try{\n           \n        const userRef = yield auth.createUserWithEmailAndPassword(email, password)\n        const {user} = userRef;\n        yield getSnapshotFromUserAuth({...user, displayName});\n        // const savedUser = yield call(createUserProfileDocument, user, {displayName});\n        // const userSnapshot = yield savedUser.get();\n        // yield put(signInSuccess({...user, displayName}));\n          \n        }catch(err) {\n            yield put(signInFailure(err))\n        };\n}\n\n// function* signInNewUser({payload: {userInfo}}) {\n//     console.log(userInfo, 'INFOOOOOOOO')\n    \n// }\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n    //sagas are listening for the action, here for checkUserSession, isUserAuthenticated performs the actual check\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUpNewUser)\n}\n\n// export function* onSignUpSuccess() {\n//     yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInNewUser)\n// }\nexport function* userSagas () {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        // call(onSignUpSuccess)\n    ])\n}"]},"metadata":{},"sourceType":"module"}