{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from '../shop/shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.util';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../shop/shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('im fired!!!!!');\n\n  try {\n    console.log('about to start');\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot); //using yield call to make sure it will get finished before following action gets triggered, call takes as arguments function and its parameters  \n    //sagas use method PUT to trigger actions (instead of dispatch)\n\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/shop/shop-sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,8BAA1D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,sBAAjE;AAGA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAN;;AAEA,MAAI;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMd,IAAI,CAACI,8BAAD,EAAiCQ,QAAjC,CAAhC,CAJA,CAI2E;AAC3E;;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,aAAD,CAAxB,CAAT;AACH,GAPD,CAOE,OAAMC,KAAN,EAAa;AACX,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AACD,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMlB,SAAS,CAACG,eAAe,CAACgB,uBAAjB,EAA0CX,qBAA1C,CAAf;AACH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from '../shop/shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.util';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../shop/shop.actions';\n\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('im fired!!!!!')\n    \n    try {\n        console.log('about to start')\n        const collectionRef = firestore.collection('collections')\n        const snapshot = yield collectionRef.get();\n        const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot) //using yield call to make sure it will get finished before following action gets triggered, call takes as arguments function and its parameters  \n        //sagas use method PUT to trigger actions (instead of dispatch)\n        yield put(fetchCollectionsSuccess(collectionMap))\n    } catch(error) {\n        yield put(fetchCollectionsFailure(error.message))\n    }\n}\nexport function* fetchCollectionsStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync)\n}\n"]},"metadata":{},"sourceType":"module"}