{"ast":null,"code":"import UserActionTypes from \"./user.types\";\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n}; //state gets passed by redux but if there is no state the initial_state will be used\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  //action obj has type indicating which redducer should get affected and payload which is the property that gets changed\n  //state is current state of the app\n  switch (action.type) {\n    case UserActionTypes.SIGNIN_SUCCESS:\n      return { ...state,\n        currentUser: action.payload,\n        error: null\n      };\n\n    case UserActionTypes.SIGNIN_FAILURE:\n    case UserActionTypes.SIGN_OUT_FAILURE:\n      return { ...state,\n        error: action.payload\n      };\n\n    case UserActionTypes.SIGN_OUT_SUCCESS:\n      return { ...state,\n        currentUser: null,\n        error: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/user/user-reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","error","userReducer","state","action","type","SIGNIN_SUCCESS","payload","SIGNIN_FAILURE","SIGN_OUT_FAILURE","SIGN_OUT_SUCCESS"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE,IADK;AAElBC,EAAAA,KAAK,EAAE;AAFW,CAAtB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACnD;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,eAAe,CAACQ,cAArB;AACI,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFjB;AAGHN,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAKH,eAAe,CAACU,cAArB;AACA,SAAKV,eAAe,CAACW,gBAArB;AACI,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFX,OAAP;;AAIJ,SAAKT,eAAe,CAACY,gBAArB;AACI,aAAO,EACH,GAAGP,KADA;AAEHH,QAAAA,WAAW,EAAE,IAFV;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAMJ;AACI,aAAOE,KAAP;AArBR;AAuBH,CA1BD;;AA4BA,eAAeD,WAAf","sourcesContent":["import UserActionTypes from \"./user.types\";\n\nconst INITIAL_STATE = {\n    currentUser: null,\n    error: null,\n}\n//state gets passed by redux but if there is no state the initial_state will be used\nconst userReducer = (state = INITIAL_STATE, action) => {\n    //action obj has type indicating which redducer should get affected and payload which is the property that gets changed\n    //state is current state of the app\n    switch (action.type) {\n        case UserActionTypes.SIGNIN_SUCCESS:\n            return {\n                ...state,\n                currentUser: action.payload,\n                error: null\n            }\n        case UserActionTypes.SIGNIN_FAILURE:\n        case UserActionTypes.SIGN_OUT_FAILURE:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case UserActionTypes.SIGN_OUT_SUCCESS:\n            return {\n                ...state,\n                currentUser: null,\n                error: null,\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;"]},"metadata":{},"sourceType":"module"}