{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport { auth, googleProvider, createUserProfileDocument, mDatabase } from '../../firebase/firebase.util';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from '../user/user.actions';\nimport { connect } from 'react-redux';\n\nfunction* signInWithGoogle() {\n  //api call here to sign in instead of in App.js:\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef, 'USERREF');\n    const user = yield call(createUserProfileDocument, userRef.user);\n    const userSnapshot = yield user.get(); //put method puts received data back into redux flow\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(googleSignInFailure(err));\n  }\n} //we're receiving action.payload here\n\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const userRef = auth.signInWithEmailAndPassword(email, password);\n    console.log(userRef, email, password, 'USERREF');\n    const user = yield call(createUserProfileDocument, userRef.user);\n    const userSnapshot = yield user.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (err) {\n    yield put(emailSignInFailure(err));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","mDatabase","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","connect","signInWithGoogle","userRef","signInWithPopup","console","log","user","userSnapshot","get","id","data","err","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGNIN_START","onEmailSignInStart","EMAIL_SIGNIN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,SAA1D,QAA2E,8BAA3E;AACA,SAAQC,mBAAR,EAA6BC,mBAA7B,EAAkDC,kBAAlD,EAAsEC,kBAAtE,QAA+F,sBAA/F;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,UAAUC,gBAAV,GAA6B;AACzB;AACA,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACW,eAAL,CAAqBV,cAArB,CAAtB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAsB,SAAtB;AACA,UAAMI,IAAI,GAAG,MAAMhB,IAAI,CAACI,yBAAD,EAA4BQ,OAAO,CAACI,IAApC,CAAvB;AACA,UAAMC,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,EAA3B,CAJA,CAKA;;AACA,UAAMpB,GAAG,CAACQ,mBAAmB,CAAC;AAACa,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAApB,CAAT;AAEH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMvB,GAAG,CAACS,mBAAmB,CAACc,GAAD,CAApB,CAAT;AACH;AACJ,C,CAED;;;AACA,UAAUC,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAwD;AACpD,MAAG;AACC,UAAMb,OAAO,GAAGV,IAAI,CAACwB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAhB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBY,KAArB,EAA4BC,QAA5B,EAAsC,SAAtC;AACA,UAAMT,IAAI,GAAG,MAAMhB,IAAI,CAACI,yBAAD,EAA4BQ,OAAO,CAACI,IAApC,CAAvB;AACA,UAAMC,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,EAA3B;AACA,UAAMpB,GAAG,CAACU,kBAAkB,CAAC;AAACW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAnB,CAAT;AAEH,GAPD,CAOC,OAAMC,GAAN,EAAW;AACR,UAAMvB,GAAG,CAACW,kBAAkB,CAACY,GAAD,CAAnB,CAAT;AACH;AACJ;;AAGD,OAAO,UAAUM,mBAAV,GAAgC;AACnC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCjB,gBAAtC,CAAhB;AACH;AAED,OAAO,UAAUkB,kBAAV,GAA+B;AAClC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCR,eAArC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAuB;AAC1B,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAAC2B,mBAAD,CADE,EAEN3B,IAAI,CAAC6B,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from '../user/user.types';\nimport { auth, googleProvider, createUserProfileDocument, mDatabase } from '../../firebase/firebase.util';\nimport {googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure} from '../user/user.actions';\nimport { connect } from 'react-redux';\n\nfunction* signInWithGoogle() {\n    //api call here to sign in instead of in App.js:\n    try {\n        const userRef = yield auth.signInWithPopup(googleProvider);\n        console.log(userRef,  'USERREF')\n        const user = yield call(createUserProfileDocument, userRef.user);\n        const userSnapshot = yield user.get();\n        //put method puts received data back into redux flow\n        yield put(googleSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n       \n    } catch (err) {\n        yield put(googleSignInFailure(err))\n    }\n}\n\n//we're receiving action.payload here\nfunction* signInWithEmail({payload: {email, password}}) {\n    try{\n        const userRef = auth.signInWithEmailAndPassword(email, password);\n        console.log(userRef, email, password, 'USERREF')\n        const user = yield call(createUserProfileDocument, userRef.user);\n        const userSnapshot = yield user.get();\n        yield put(emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()}));\n\n    }catch(err) {\n        yield put(emailSignInFailure(err))\n    }\n}\n\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail)\n}\n\nexport function* userSagas () {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}