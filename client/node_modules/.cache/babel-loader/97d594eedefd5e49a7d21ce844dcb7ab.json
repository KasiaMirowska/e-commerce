{"ast":null,"code":"//creating selectors allows us to store/cache the section of a state so that it's not constatnly rerendered even when not changed => improves performance\nimport{createSelector}from'reselect';// there are INPUTSelectors that dont use anything, and OUTPUTselectors that use INPUTselectors and createSelector method to build themselves\n//inputSelector just deconstructs the state : \nvar selectCart=function selectCart(state){return state.cart;};//always add word select as a naming convention to the state property that we select in order to keep it clear\n//OUTPUTselector uses createSelector that takes 2 arguments: an array of INPUT SELECTORS and a function that returns the wanted slice of the state. THis function takes inputSelector's returned output as arguments\nexport var selectCartItems=createSelector([selectCart],function(cart){return cart.cartItems;//because state.cart is what selectCart is targeting\n});export var selectCartHidden=createSelector([selectCart],function(cart){return cart.hidden;});export var selectCartItemsCount=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(accumalatedQuantity,cartItem){return accumalatedQuantity+cartItem.quantity;},0);});export var selectCartTotal=createSelector([selectCartItems],function(cartItems){return cartItems.reduce(function(accumualtedPrice,item){return accumualtedPrice+item.quantity*item.price;},0);});","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/cart/cart.selectors.js"],"names":["createSelector","selectCart","state","cart","selectCartItems","cartItems","selectCartHidden","hidden","selectCartItemsCount","reduce","accumalatedQuantity","cartItem","quantity","selectCartTotal","accumualtedPrice","item","price"],"mappings":"AAAA;AAGA,OAASA,cAAT,KAA+B,UAA/B,CACA;AACA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,IAAV,EAAxB,CACA;AAEA;AACA,MAAO,IAAMC,CAAAA,eAAe,CAAGJ,cAAc,CACzC,CAACC,UAAD,CADyC,CAEzC,SAAAE,IAAI,CAAI,CACJ,MAAOA,CAAAA,IAAI,CAACE,SAAZ,CAAsB;AACzB,CAJwC,CAAtC,CAMP,MAAO,IAAMC,CAAAA,gBAAgB,CAAGN,cAAc,CAC1C,CAACC,UAAD,CAD0C,CAE1C,SAAAE,IAAI,QAAIA,CAAAA,IAAI,CAACI,MAAT,EAFsC,CAAvC,CAKP,MAAO,IAAMC,CAAAA,oBAAoB,CAAGR,cAAc,CAC9C,CAACI,eAAD,CAD8C,CAE9C,SAAAC,SAAS,CAAI,CACT,MAAOA,CAAAA,SAAS,CAACI,MAAV,CACH,SAACC,mBAAD,CAAsBC,QAAtB,QACED,CAAAA,mBAAmB,CAAGC,QAAQ,CAACC,QADjC,EADG,CAGH,CAHG,CAAP,CAKH,CAR6C,CAA3C,CAUP,MAAO,IAAMC,CAAAA,eAAe,CAAGb,cAAc,CACzC,CAACI,eAAD,CADyC,CAEzC,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACI,MAAV,CAAiB,SAACK,gBAAD,CAAmBC,IAAnB,QAA4BD,CAAAA,gBAAgB,CAAGC,IAAI,CAACH,QAAL,CAAgBG,IAAI,CAACC,KAApE,EAAjB,CAA4F,CAA5F,CAAJ,EAFgC,CAAtC","sourcesContent":["//creating selectors allows us to store/cache the section of a state so that it's not constatnly rerendered even when not changed => improves performance\n\n\nimport { createSelector } from 'reselect';\n// there are INPUTSelectors that dont use anything, and OUTPUTselectors that use INPUTselectors and createSelector method to build themselves\n//inputSelector just deconstructs the state : \nconst selectCart = state => state.cart;\n//always add word select as a naming convention to the state property that we select in order to keep it clear\n\n//OUTPUTselector uses createSelector that takes 2 arguments: an array of INPUT SELECTORS and a function that returns the wanted slice of the state. THis function takes inputSelector's returned output as arguments\nexport const selectCartItems = createSelector(\n    [selectCart],\n    cart => {\n        return cart.cartItems //because state.cart is what selectCart is targeting\n    });\n\nexport const selectCartHidden = createSelector(\n    [selectCart],\n    cart => cart.hidden\n);\n\nexport const selectCartItemsCount = createSelector(\n    [selectCartItems],\n    cartItems => {\n        return cartItems.reduce(\n            (accumalatedQuantity, cartItem) =>\n              accumalatedQuantity + cartItem.quantity,\n            0\n          )\n    });\n\nexport const selectCartTotal = createSelector(\n    [selectCartItems],\n    cartItems => cartItems.reduce((accumualtedPrice, item) => accumualtedPrice + item.quantity * item.price, 0)\n)"]},"metadata":{},"sourceType":"module"}