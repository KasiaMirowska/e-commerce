{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from '../shop/shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.util';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../shop/shop.actions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('im fired!!!!!');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot); //using yield call to make sure it will get finished before following action gets triggered, call takes as arguments function and its parameters  \n    //sagas use method PUT to trigger actions (instead of dispatch)\n  } catch (error) {} // collectionRef\n  // .get()\n  // .then(snapshot => {\n  //     const collectionsMap = convertCollectionSnapshotToMap(snapshot)\n  //     dispatch(fetchCollectionsSuccess(collectionsMap)) \n  // }) \n  // .catch(err => {\n  //     return dispatch(fetchCollectionsFailure(err.message))\n  // })\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/shop/shop-sagas.js"],"names":["takeEvery","call","put","ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,8BAA1D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,sBAAjE;AAGA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAN;;AAEA,MAAI;AACA,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMd,IAAI,CAACI,8BAAD,EAAiCQ,QAAjC,CAAhC,CAHA,CAG2E;AAC3E;AACH,GALD,CAKE,OAAMG,KAAN,EAAa,CAEd,CAVoC,CAYrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH;AACD,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMjB,SAAS,CAACG,eAAe,CAACe,uBAAjB,EAA0CV,qBAA1C,CAAf;AACH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from '../shop/shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.util';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../shop/shop.actions';\n\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('im fired!!!!!')\n    \n    try {\n        const collectionRef = firestore.collection('collections')\n        const snapshot = yield collectionRef.get();\n        const collectionMap = yield call(convertCollectionSnapshotToMap, snapshot) //using yield call to make sure it will get finished before following action gets triggered, call takes as arguments function and its parameters  \n        //sagas use method PUT to trigger actions (instead of dispatch)\n    } catch(error) {\n\n    }\n\n    // collectionRef\n    // .get()\n    // .then(snapshot => {\n    //     const collectionsMap = convertCollectionSnapshotToMap(snapshot)\n    //     dispatch(fetchCollectionsSuccess(collectionsMap)) \n    // }) \n    // .catch(err => {\n    //     return dispatch(fetchCollectionsFailure(err.message))\n    // })\n\n}\nexport function* fetchCollectionsStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync)\n}\n"]},"metadata":{},"sourceType":"module"}