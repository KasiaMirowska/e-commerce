{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\n\nimport 'firebase/auth'; //for authentication\n\nconst config = {\n  apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n  authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n  databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n  projectId: \"crown-db-3ccd2\",\n  storageBucket: \"crown-db-3ccd2.appspot.com\",\n  messagingSenderId: \"506711171270\",\n  appId: \"1:506711171270:web:b0f9c788f57944529637c7\" // measurementId: \"G-6SS2MF5K16\"\n\n}; //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    console.log('does not exist');\n    return;\n  } //if does exist then query the db\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); //or create a new user\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      const userRefSet = {\n        //another firestore method for creating a user\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      };\n      await userRef.set(userRefSet);\n    } catch (err) {\n      console.log('error creating a user', err.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionName, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionName); //we're calling for the collection object which firebase returns even if it's empty.\n\n  console.log(collectionRef, 'COLLECTIONREFFFFFFFFFFFF', objectsToAdd, \"OBJECT?????\"); //now we will start to populate the collection with objects/items one at the time as doc with multiple calls gathered in one batch\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //method to make firestore assign an id to each genereated object in the db collection, for each item\n\n    batch.set(newDocRef, obj); //now we're assiginig the value of our object item to each doc created in db in order to save it. batch method will group these calls into a queues for us authomaticly\n  }); //now we need to commit the calls to db\n\n  return await batch.commit();\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data(); //this method gets the actual value of the documentRef \n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config); //configuration neccesary for google auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const mDatabase = firebase.firestore(\"users\");\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); //makes a pop up with google acc to choose from, provider is a class\n\nexport default firebase;","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","userRefSet","set","err","message","addCollectionAndDocuments","collectionName","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","mDatabase","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\nimport 'firebase/auth'; //for authentication\n\n\nconst config = {\n    apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n    authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n    databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n    projectId: \"crown-db-3ccd2\",\n    storageBucket: \"crown-db-3ccd2.appspot.com\",\n    messagingSenderId: \"506711171270\",\n    appId: \"1:506711171270:web:b0f9c788f57944529637c7\",\n    // measurementId: \"G-6SS2MF5K16\"\n  };\n  //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n  export const createUserProfileDocument = async ( userAuth, additionalData) => {\n    if(!userAuth) {\n       console.log('does not exist')\n       return;\n    }\n    //if does exist then query the db\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = await userRef.get()\n    \n    //or create a new user\n    if(!snapshot.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n       \n        try {\n            const userRefSet = { //another firestore method for creating a user\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            };\n            \n            await userRef.set(userRefSet)\n\n        }catch (err) {\n            console.log('error creating a user', err.message)\n        }\n    }\n    return userRef;\n  }\n\n  export const addCollectionAndDocuments = async(collectionName, objectsToAdd) => {\n    const collectionRef= firestore.collection(collectionName) //we're calling for the collection object which firebase returns even if it's empty.\n    console.log(collectionRef, 'COLLECTIONREFFFFFFFFFFFF', objectsToAdd, \"OBJECT?????\") //now we will start to populate the collection with objects/items one at the time as doc with multiple calls gathered in one batch\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc()//method to make firestore assign an id to each genereated object in the db collection, for each item\n        batch.set(newDocRef, obj) //now we're assiginig the value of our object item to each doc created in db in order to save it. batch method will group these calls into a queues for us authomaticly\n    })\n     //now we need to commit the calls to db\n    return await batch.commit()\n  }\n\n  export const convertCollectionSnapshotToMap = (collections) => {\n      const transformedCollections = collections.docs.map(doc => {\n          const { title, items } = doc.data() //this method gets the actual value of the documentRef \n          return {\n              routeName: encodeURI(title.toLowerCase()),\n              id: doc.id,\n              title,\n              items\n          }\n      })\n      \n      return transformedCollections.reduce((accumulator, collection) => {\n          accumulator[collection.title.toLowerCase()] = collection;\n          return accumulator;\n      }, {})\n  }\n\n  firebase.initializeApp(config);\n  //configuration neccesary for google auth\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n  export const mDatabase = firebase.firestore(\"users\")\n  export const googleProvider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n  googleProvider.setCustomParameters({ prompt: 'select_account' }); //makes a pop up with google acc to choose from, provider is a class\n  \n  export default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}