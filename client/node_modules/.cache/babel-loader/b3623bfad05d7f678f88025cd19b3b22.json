{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import logger from'redux-logger';import{persistStore}from'redux-persist';//allows browser to cache our store\nimport rootReducer from'./root-reducer';import thunk from'redux-thunk';import createSagaMiddleware from'redux-saga';import{fetchCollectionsStart}from'../redux/shop/shop-sagas';import rootSaga from'./root-saga';//middlaware is an array hence to keep it scalable we write the following:\nvar sagaMiddleware=createSagaMiddleware();var middlewares=[sagaMiddleware];if(process.env.NODE_ENV==='development'){middlewares.push(logger);}export var store=createStore(rootReducer,applyMiddleware.apply(void 0,middlewares));sagaMiddleware.run(rootSaga);//we created root saga to run multiple sagas when component mounts instead of typing run method for each saga separatly\nexport var persistor=persistStore(store);export default{store:store,persistor:persistor};","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","rootReducer","thunk","createSagaMiddleware","fetchCollectionsStart","rootSaga","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,OAAQA,WAAR,CAAqBC,eAArB,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAAQC,YAAR,KAA2B,eAA3B,CAA4C;AAC5C,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,OAAQC,qBAAR,KAAoC,0BAApC,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA;AAEA,GAAMC,CAAAA,cAAc,CAAGH,oBAAoB,EAA3C,CACA,GAAMI,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEA,GAAGE,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA5B,CAA2C,CACvCH,WAAW,CAACI,IAAZ,CAAiBZ,MAAjB,EACH,CAED,MAAO,IAAMa,CAAAA,KAAK,CAAGf,WAAW,CAACI,WAAD,CAAcH,eAAe,MAAf,QAAmBS,WAAnB,CAAd,CAAzB,CAEND,cAAc,CAACO,GAAf,CAAmBR,QAAnB,EAA6B;AAC9B,MAAO,IAAMS,CAAAA,SAAS,CAAGd,YAAY,CAACY,KAAD,CAA9B,CACP,cAAe,CAACA,KAAK,CAALA,KAAD,CAAQE,SAAS,CAATA,SAAR,CAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport {persistStore} from 'redux-persist'; //allows browser to cache our store\nimport rootReducer from './root-reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport {fetchCollectionsStart} from '../redux/shop/shop-sagas';\nimport rootSaga from './root-saga';\n//middlaware is an array hence to keep it scalable we write the following:\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif(process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n\n sagaMiddleware.run(rootSaga) //we created root saga to run multiple sagas when component mounts instead of typing run method for each saga separatly\nexport const persistor = persistStore(store);  \nexport default {store, persistor};"]},"metadata":{},"sourceType":"module"}