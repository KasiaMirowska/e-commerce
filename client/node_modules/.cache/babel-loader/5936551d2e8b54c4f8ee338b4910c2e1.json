{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\n\nimport 'firebase/auth'; //for authentication\n\nconst config = {\n  apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n  authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n  databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n  projectId: \"crown-db-3ccd2\",\n  storageBucket: \"crown-db-3ccd2.appspot.com\",\n  messagingSenderId: \"506711171270\",\n  appId: \"1:506711171270:web:b0f9c788f57944529637c7\" // measurementId: \"G-6SS2MF5K16\"\n\n}; //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    console.log('does not exist');\n    return;\n  } //if does exist then query the db\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); //or create a new user\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      const userRefSet = {\n        //another firestore method for creating a user\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      };\n      await userRef.set(userRefSet);\n    } catch (err) {\n      console.log('error creating a user', err.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionName, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionName); //we're calling for the collection object which firebse returns even if it's empty.\n\n  console.log(collectionRef, 'COLLECTIONREFFFFFFFFFFFF', objectsToAdd, \"OBJECT?????\"); //now we will start to populate the collection with objects/items one at the time as doc with multiple calls gathered in one batch\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //method to make firestore assign an id to each genereated object in the db collection, for each item\n\n    batch.set(newDocRef, obj); //now we're assiginig the value of our object item to each doc created in db in order to save it. batch method does these serious of calls for us authomaticly\n\n    console.log(batch, \"DOCREFFFFFFF\");\n  });\n};\nfirebase.initializeApp(config); //configuration neccesary for google auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //makes a pop up with google acc to choose from, provider is a class\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","userRefSet","set","err","message","addCollectionAndDocuments","collectionName","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AAGxB,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI,CAQX;;AARW,CAAf,C,CAUE;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAQC,QAAR,EAAkBC,cAAlB,KAAqC;AAC5E,MAAG,CAACD,QAAJ,EAAc;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACF,GAJ2E,CAK5E;;;AACA,QAAMC,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQN,QAAQ,CAACO,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAP4E,CAS5E;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBZ,QAA7B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMC,UAAU,GAAG;AAAE;AACjBJ,QAAAA,WADe;AAEfC,QAAAA,KAFe;AAGfC,QAAAA,SAHe;AAIf,WAAGZ;AAJY,OAAnB;AAOA,YAAMG,OAAO,CAACY,GAAR,CAAYD,UAAZ,CAAN;AAEH,KAVD,CAUC,OAAOE,GAAP,EAAY;AACTf,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCc,GAAG,CAACC,OAAzC;AACH;AACJ;;AACD,SAAOd,OAAP;AACD,CA7BM;AA+BP,OAAO,MAAMe,yBAAyB,GAAG,CAACC,cAAD,EAAiBC,YAAjB,KAAkC;AACzE,QAAMC,aAAa,GAAEjB,SAAS,CAACkB,UAAV,CAAqBH,cAArB,CAArB,CADyE,CACf;;AAC1DlB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,aAAZ,EAA2B,0BAA3B,EAAuDD,YAAvD,EAAqE,aAArE,EAFyE,CAEW;;AACpF,QAAMG,KAAK,GAAGnB,SAAS,CAACmB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAAChB,GAAd,EAAlB,CADwB,CACa;;AACrCkB,IAAAA,KAAK,CAACR,GAAN,CAAUW,SAAV,EAAqBD,GAArB,EAFwB,CAEE;;AAC1BxB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,KAAZ,EAAmB,cAAnB;AACH,GAJD;AAKD,CATM;AAYPlC,QAAQ,CAACsC,aAAT,CAAuBrC,MAAvB,E,CACA;;AAEA,OAAO,MAAMsC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMyB,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB,C,CAAyD;;AACzDD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\nimport 'firebase/auth'; //for authentication\n\n\nconst config = {\n    apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n    authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n    databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n    projectId: \"crown-db-3ccd2\",\n    storageBucket: \"crown-db-3ccd2.appspot.com\",\n    messagingSenderId: \"506711171270\",\n    appId: \"1:506711171270:web:b0f9c788f57944529637c7\",\n    // measurementId: \"G-6SS2MF5K16\"\n  };\n  //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n  export const createUserProfileDocument = async ( userAuth, additionalData) => {\n    if(!userAuth) {\n       console.log('does not exist')\n       return;\n    }\n    //if does exist then query the db\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = await userRef.get()\n    \n    //or create a new user\n    if(!snapshot.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n       \n        try {\n            const userRefSet = { //another firestore method for creating a user\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            };\n            \n            await userRef.set(userRefSet)\n\n        }catch (err) {\n            console.log('error creating a user', err.message)\n        }\n    }\n    return userRef;\n  }\n\n  export const addCollectionAndDocuments = (collectionName, objectsToAdd) => {\n    const collectionRef= firestore.collection(collectionName) //we're calling for the collection object which firebse returns even if it's empty.\n    console.log(collectionRef, 'COLLECTIONREFFFFFFFFFFFF', objectsToAdd, \"OBJECT?????\") //now we will start to populate the collection with objects/items one at the time as doc with multiple calls gathered in one batch\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc()//method to make firestore assign an id to each genereated object in the db collection, for each item\n        batch.set(newDocRef, obj) //now we're assiginig the value of our object item to each doc created in db in order to save it. batch method does these serious of calls for us authomaticly\n        console.log(batch, \"DOCREFFFFFFF\")\n    })\n  }\n\n\n  firebase.initializeApp(config);\n  //configuration neccesary for google auth\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n  provider.setCustomParameters({ prompt: 'select_account' }); //makes a pop up with google acc to choose from, provider is a class\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}