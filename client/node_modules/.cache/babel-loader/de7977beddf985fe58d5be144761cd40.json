{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\n\nimport 'firebase/auth'; //for authentication\n\nconst config = {\n  apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n  authDomain: 'crwn-db.firebaseapp.com',\n  databaseURL: 'https://crwn-db.firebaseio.com',\n  projectId: 'crwn-db',\n  storageBucket: 'crwn-db.appspot.com',\n  messagingSenderId: '850995411664',\n  appId: '1:850995411664:web:7ddc01d597846f65'\n}; //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n\nexport const createUserProfileDocument = async (userAuth, ...additionalData) => {\n  if (!userAuth) {\n    console.log('does not exist');\n    return;\n  } //if does exist then query the db\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); //or create a new user\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        //another firestore method for creating a user\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating a user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); //configuration neccesary for google auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //makes a pop up with google acc to choose from, provider is a class\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","err","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AAGxB,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,yBAFD;AAGXC,EAAAA,WAAW,EAAE,gCAHF;AAIXC,EAAAA,SAAS,EAAE,SAJA;AAKXC,EAAAA,aAAa,EAAE,qBALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf,C,CASE;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAQC,QAAR,EAAkB,GAAGC,cAArB,KAAwC;AAC/E,MAAG,CAACD,QAAJ,EAAc;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACF,GAJ8E,CAK/E;;;AACA,QAAMC,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQN,QAAQ,CAACO,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAP+E,CAQ/E;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBZ,QAA7B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAAE;AAChBJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGZ;AAJW,OAAZ,CAAN;AAOH,KARD,CAQC,OAAOe,GAAP,EAAY;AACTd,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCa,GAAG,CAACC,OAAzC;AACH;AACJ;;AACD,SAAOb,OAAP;AACD,CA1BM;AA6BPd,QAAQ,CAAC4B,aAAT,CAAuB3B,MAAvB,E,CACA;;AAEA,OAAO,MAAM4B,IAAI,GAAG7B,QAAQ,CAAC6B,IAAT,EAAb;AACP,OAAO,MAAMd,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMe,QAAQ,GAAG,IAAI9B,QAAQ,CAAC6B,IAAT,CAAcE,kBAAlB,EAAjB,C,CAAyD;;AACzDD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe9B,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\nimport 'firebase/auth'; //for authentication\n\n\nconst config = {\n    apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n    authDomain: 'crwn-db.firebaseapp.com',\n    databaseURL: 'https://crwn-db.firebaseio.com',\n    projectId: 'crwn-db',\n    storageBucket: 'crwn-db.appspot.com',\n    messagingSenderId: '850995411664',\n    appId: '1:850995411664:web:7ddc01d597846f65'\n  };\n  //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n  export const createUserProfileDocument = async ( userAuth, ...additionalData) => {\n    if(!userAuth) {\n       console.log('does not exist')\n       return;\n    }\n    //if does exist then query the db\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = await userRef.get()\n    //or create a new user\n    if(!snapshot.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({ //another firestore method for creating a user\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n\n        }catch (err) {\n            console.log('error creating a user', err.message)\n        }\n    }\n    return userRef;\n  }\n\n\n  firebase.initializeApp(config);\n  //configuration neccesary for google auth\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n  provider.setCustomParameters({ prompt: 'select_account' }); //makes a pop up with google acc to choose from, provider is a class\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}