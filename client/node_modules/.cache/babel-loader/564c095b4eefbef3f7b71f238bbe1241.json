{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\n\nimport 'firebase/auth'; //for authentication\n\nimport { connect } from 'react-redux';\nconst config = {\n  apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n  authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n  databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n  projectId: \"crown-db-3ccd2\",\n  storageBucket: \"crown-db-3ccd2.appspot.com\",\n  messagingSenderId: \"506711171270\",\n  appId: \"1:506711171270:web:b0f9c788f57944529637c7\" // measurementId: \"G-6SS2MF5K16\"\n\n}; //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n\nexport const createUserProfileDocument = async (userAuth, ...additionalData) => {\n  if (!userAuth) {\n    console.log('does not exist');\n    return;\n  } //if does exist then query the db\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); //or create a new user\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    console.log(displayName, Object.keys(userAuth), 'KEYS', userAuth, 'INSIDE UTILLLLLLLLLLLLLLLL');\n\n    try {\n      await userRef.set({\n        //another firestore method for creating a user\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating a user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); //configuration neccesary for google auth\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //makes a pop up with google acc to choose from, provider is a class\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/kamirska/UDEMYlearning/e-commerce/src/firebase/firebase.util.js"],"names":["firebase","connect","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","Object","keys","set","err","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AACxB,SAASC,OAAT,QAAwB,aAAxB;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI,CAQX;;AARW,CAAf,C,CAUE;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAQC,QAAR,EAAkB,GAAGC,cAArB,KAAwC;AAC/E,MAAG,CAACD,QAAJ,EAAc;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACF,GAJ8E,CAK/E;;;AACA,QAAMC,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQN,QAAQ,CAACO,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAP+E,CAQ/E;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBZ,QAA7B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYQ,WAAZ,EAAyBI,MAAM,CAACC,IAAP,CAAYhB,QAAZ,CAAzB,EAAgD,MAAhD,EAAwDA,QAAxD,EAAkE,4BAAlE;;AACA,QAAI;AACA,YAAMI,OAAO,CAACa,GAAR,CAAY;AAAE;AAChBN,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGZ;AAJW,OAAZ,CAAN;AAOH,KARD,CAQC,OAAOiB,GAAP,EAAY;AACThB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCe,GAAG,CAACC,OAAzC;AACH;AACJ;;AACD,SAAOf,OAAP;AACD,CA1BM;AA6BPf,QAAQ,CAAC+B,aAAT,CAAuB7B,MAAvB,E,CACA;;AAEA,OAAO,MAAM8B,IAAI,GAAGhC,QAAQ,CAACgC,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAIjC,QAAQ,CAACgC,IAAT,CAAcE,kBAAlB,EAAjB,C,CAAyD;;AACzDD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAejC,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore'; //for database\nimport 'firebase/auth'; //for authentication\nimport { connect } from 'react-redux';\n\n\nconst config = {\n    apiKey: \"AIzaSyAvZb8PsjokOEf4AC16V0613SHcH7ESYeI\",\n    authDomain: \"crown-db-3ccd2.firebaseapp.com\",\n    databaseURL: \"https://crown-db-3ccd2.firebaseio.com\",\n    projectId: \"crown-db-3ccd2\",\n    storageBucket: \"crown-db-3ccd2.appspot.com\",\n    messagingSenderId: \"506711171270\",\n    appId: \"1:506711171270:web:b0f9c788f57944529637c7\",\n    // measurementId: \"G-6SS2MF5K16\"\n  };\n  //saving a user into db passing userAuth object that we receive when googleSignIn...we ALWAYS recieve an object back but it might be empty\n  export const createUserProfileDocument = async ( userAuth, ...additionalData) => {\n    if(!userAuth) {\n       console.log('does not exist')\n       return;\n    }\n    //if does exist then query the db\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = await userRef.get()\n    //or create a new user\n    if(!snapshot.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        console.log(displayName, Object.keys(userAuth), 'KEYS', userAuth, 'INSIDE UTILLLLLLLLLLLLLLLL')\n        try {\n            await userRef.set({ //another firestore method for creating a user\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n\n        }catch (err) {\n            console.log('error creating a user', err.message)\n        }\n    }\n    return userRef;\n  }\n\n\n  firebase.initializeApp(config);\n  //configuration neccesary for google auth\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  const provider = new firebase.auth.GoogleAuthProvider(); //from firebase library for google auth\n  provider.setCustomParameters({ prompt: 'select_account' }); //makes a pop up with google acc to choose from, provider is a class\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n  export default firebase;\n\n\n"]},"metadata":{},"sourceType":"module"}